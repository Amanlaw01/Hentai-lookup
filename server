#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 8080
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

sqlite3 *db;

typedef struct {
    int socket;
    int game_id;
    char username[50];
} client_t;

client_t *clients[MAX_CLIENTS];

void *handle_client(void *arg);
void broadcast_message(int game_id, const char *message, const char *sender);

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    // Initialize SQLite database
    if (sqlite3_open("tictactoe.db", &db) != SQLITE_OK) {
        fprintf(stderr, "Cannot open database: %s\n", sqlite3_errmsg(db));
        return 1;
    }

    // Create server socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind socket
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    printf("Server started. Waiting for connections...\n");

    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        printf("New connection...\n");

        pthread_t thread;
        client_t *client = malloc(sizeof(client_t));
        client->socket = new_socket;

        pthread_create(&thread, NULL, handle_client, (void *)client);
    }

    sqlite3_close(db);
    return 0;
}

void *handle_client(void *arg) {
    client_t *client = (client_t *)arg;
    char buffer[BUFFER_SIZE];
    int n;

    // Receive username
    if ((n = recv(client->socket, buffer, BUFFER_SIZE, 0)) <= 0) {
        close(client->socket);
        free(client);
        pthread_exit(NULL);
    }
    buffer[n] = '\0';
    strcpy(client->username, buffer);

    // Game and chat loop
    while ((n = recv(client->socket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[n] = '\0';
        printf("Message from %s: %s\n", client->username, buffer);
        broadcast_message(client->game_id, buffer, client->username);
    }

    close(client->socket);
    free(client);
    pthread_exit(NULL);
}

void broadcast_message(int game_id, const char *message, const char *sender) {
    for (int i = 0; i < MAX_CLIENTS; ++i) {
        if (clients[i] && clients[i]->game_id == game_id) {
            char buffer[BUFFER_SIZE];
            snprintf(buffer, BUFFER_SIZE, "%s: %s", sender, message);
            send(clients[i]->socket, buffer, strlen(buffer), 0);
        }
    }
}
